@startuml Book Management Application
class GeneralBook {
  - title: String
  - author: String
  - averageRating: double
  - ratingCount: int
  - reviews: List<String>
  + getTitle(): String
  + getAuthor(): String
  + getAverageRating(): double
  + getRatingCount(): int
  + getReviews(): List<String>
  + addRating(rating: double): void
  + addReview(review: String): void
}

class GeneralDatabase {
  - books: List<GeneralBook>
  + GeneralDatabase()
  + loadFromCSV(filePath: String): void
  + getBooks(): List<GeneralBook>
  + addBook(book: GeneralBook): void
  + removeBook(title: String): void
}

class GeneralDatabaseGUI {
  - table: JTable
  - personalDatabase: PersonalDatabase
  - addToPersonalLibraryButton: JButton
  + GeneralDatabaseGUI(database: GeneralDatabase, personalDatabase: PersonalDatabase)
  + populateTable(books: List<GeneralBook>): void
  + addBookToPersonalLibrary(): void
}

class PersonalBook {
  - status: String
  - timeSpent: int
  - startDate: String
  - endDate: String
  - userRatings: List<Double>
  - userReviews: List<String>
  + PersonalBook(title: String, author: String)
  + getStatus(): String
  + setStatus(status: String): void
  + getTimeSpent(): int
  + addTimeSpent(time: int): void
  + getStartDate(): String
  + setStartDate(date: String): void
  + getEndDate(): String
  + setEndDate(date: String): void
  + getUserRatings(): List<Double>
  + getUserReviews(): List<String>
  + addUserRating(rating: double): void
  + addUserReview(review: String): void
}

class PersonalDatabase {
  - personalBooks: List<PersonalBook>
  + PersonalDatabase()
  + getPersonalBooks(): List<PersonalBook>
  + addPersonalBook(book: PersonalBook): void
  + removePersonalBook(title: String): void
  + getPersonalBook(title: String): PersonalBook
  + saveToFile(filePath: String): void
  + loadFromFile(filePath: String): void
}

class PersonalDatabaseGUI {
  - personalTable: JTable
  - personalTableModel: DefaultTableModel
  + PersonalDatabaseGUI(database: PersonalDatabase)
  + populatePersonalTable(books: List<PersonalBook>): void
}

class LoginAndRegistrationPage {
  - userDatabase: Map<String, String>
  - adminCredentials: Map<String, String>
  - loginListener: LoginListener
  + setLoginListener(listener: LoginListener): void
  + login(): void
  + register(): void
  + loadUsersFromFile(): void
  + saveUsersToFile(): void
}

interface LoginListener {
  + onLoginSuccess(isAdmin: Boolean): void
}

class MainInterface {
  - generalDatabaseButton: JButton
  - personalDatabaseButton: JButton
  - logoutButton: JButton
  + MainInterface()
  + setGeneralDatabaseListener(listener: Runnable): void
  + setPersonalDatabaseListener(listener: Runnable): void
  + setLogoutListener(listener: Runnable): void
}

class MainApp {
  - generalDatabase: GeneralDatabase
  - personalDatabase: PersonalDatabase
  + MainApp()
  + initializeLoginPage(): void
  + openMainInterface(): void
  + openAdminPage(): void
}

GeneralDatabase "1" *-- "many" GeneralBook
PersonalDatabase "1" *-- "many" PersonalBook
GeneralDatabaseGUI "1" -- "1" GeneralDatabase
GeneralDatabaseGUI "1" -- "1" PersonalDatabase
PersonalDatabaseGUI "1" -- "1" PersonalDatabase
LoginAndRegistrationPage "1" -- "1" LoginListener
MainApp "1" -- "1" GeneralDatabase
MainApp "1" -- "1" PersonalDatabase
MainApp "1" -- "1" LoginAndRegistrationPage
MainInterface "1" -- "1" MainApp
MainInterface "1" -- "1" GeneralDatabaseGUI
MainInterface "1" -- "1" PersonalDatabaseGUI

@enduml
